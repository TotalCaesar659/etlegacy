# ______   _______   _
#|  ____| |__   __| | |
#| |__       | |    | |        ___    __ _    __ _    ___   _   _
#|  __|      | |    | |       / _ \  / _` |  / _` |  / __| | | | |
#| |____     | |    | |____  |  __/ | (_| | | (_| | | (__  | |_| |
#|______|    |_|    |______|  \___|  \__, |  \__,_|  \___|  \__, |
#                                     __/ |                  __/ |
#                                    |___/                  |___/
# 2021 Legacy team
name: ETLBuild

on:
#  pull_request:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * FRI'

jobs:

#   __  __               _                                                  _     _
#  |  \/  |             | |                                                | |   (_)
#  | \  / |   ___     __| |     __ _    ___   _ __     ___   _ __    __ _  | |_   _    ___    _ __
#  | |\/| |  / _ \   / _` |    / _` |  / _ \ | '_ \   / _ \ | '__|  / _` | | __| | |  / _ \  | '_ \
#  | |  | | | (_) | | (_| |   | (_| | |  __/ | | | | |  __/ | |    | (_| | | |_  | | | (_) | | | | |
#  |_|  |_|  \___/   \__,_|    \__, |  \___| |_| |_|  \___| |_|     \__,_|  \__| |_|  \___/  |_| |_|
#                               __/ |
#                              |___/

  lnx64-mod:
    runs-on: ubuntu-16.04
    container:
      image: etlegacy/lnx-build:centos7
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Build
        shell: bash
        run: ./easybuild.sh build -64 -mod

      - uses: actions/upload-artifact@v2
        with:
          name: lnx64-mod
          path: |
            build/legacy/cgame*.so
            build/legacy/ui*.so

  osx-mod:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Install dependencies
        run: brew bundle

      - name: Build
        env:
          DEVELOPER_DIR: /Applications/Xcode_11.2.app/Contents/Developer
        shell: bash
        run: ./easybuild.sh build -64 -mod --osx=10.14

      - uses: actions/upload-artifact@v2
        with:
          name: osx-mod
          path: |
            build/legacy/cgame_mac
            build/legacy/ui_mac

  win-mod:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Build
        shell: cmd
        run: call .\easybuild.bat build -mod

      - uses: actions/upload-artifact@v2
        with:
          name: win-mod
          path: |
            build/legacy/cgame*.dll
            build/legacy/ui*.dll

  android-mod:
    runs-on: ubuntu-18.04
    steps:
      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Cloning Android Repo
        uses: actions/checkout@v2
        with:
          repository: etlegacy/etlegacy-android
          submodules: true
          fetch-depth: 0

      - name: Downloading NDK
        uses: actions/checkout@v2
        with:
          repository: rafal1137/NDK_ETL
          path: NDK_ETL

      - name: Grant execute permission for gradlew
        shell: bash
        run: chmod +x ./gradlew

      - name: Build
        run: |
          echo "export ANDROID_NDK_HOME=$GITHUB_WORKSPACE/NDK_ETL/ndk-bundle" > ~/.bashrc
          source ~/.bashrc
          chmod -R 775 $ANDROID_NDK_HOME
          echo $ANDROID_NDK_HOME
          ./gradlew clean build

      - uses: actions/upload-artifact@v2
        with:
          name: android-mod
          path: |
            build/legacy/libcgame*.so
            build/legacy/libui*.so

  raspberry_pi-mod:
    runs-on: ubuntu-16.04
    strategy:
      matrix:
        include:
          - arch: armv7
            distro: buster
          - arch: aarch64
            distro: ubuntu20.04
    steps:
      - uses: actions/checkout@v2.1.0
        with:
          submodules: true
          fetch-depth: 0

      - uses: uraimo/run-on-arch-action@v2.0.5
        name: Build on ${{ matrix.arch }}
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          run: |
            apt-get update -q -y
            apt-get -y install build-essential libudev-dev libwebp-dev automake zlib1g \
            nasm autoconf cmake git zip gcc g++ libtool
            ./easybuild.sh build -RPI -mod

      - uses: actions/upload-artifact@v2
        with:
          name: raspberry_pi-mod
          path: |
            build/legacy/cgame*.so
            build/legacy/ui*.so

#   __  __                                                          _
#  |  \/  |                                                        | |
#  | \  / |   ___   _ __    __ _    ___     _ __ ___     ___     __| |  ___
#  | |\/| |  / _ \ | '__|  / _` |  / _ \   | '_ ` _ \   / _ \   / _` | / __|
#  | |  | | |  __/ | |    | (_| | |  __/   | | | | | | | (_) | | (_| | \__ \
#  |_|  |_|  \___| |_|     \__, |  \___|   |_| |_| |_|  \___/   \__,_| |___/
#                           __/ |
#                          |___/
# Since lnx32 is installing the most, use it as the step that combines all the other steps mod files.
# This step also generates the final packages for 32 bit lnx.
  lnx32:
    runs-on: ubuntu-16.04
    container:
      image: etlegacy/lnx-build:centos7
    needs: [ lnx64-mod, osx-mod, win-mod, raspberry_pi-mod ]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

# These are for the ubuntu build, our own build image has everything preinstalled.
#      - name: Install dependencies
#        run: |
#          sudo dpkg --add-architecture i386
#          sudo apt update
#          sudo apt install nasm gcc-multilib g++-multilib zip
#          sudo apt install libwayland-dev:i386 wayland-protocols libgl1-mesa-dev:i386 libglu1-mesa-dev:i386
#          sudo apt install libasound2-dev:i386 pulseaudio:i386 libpulse-dev zlib1g-dev:i386 libsnappy-dev:i386 liblz4-1:i386

      - name: Build
        shell: bash
        run: ./easybuild.sh build -32

      - uses: actions/download-artifact@v2
        with:
          path: build/legacy

      - name: Merge mod files
        shell: bash
        working-directory: build/legacy
        run: |
          zip -rvj legacy_*.pk3 win-mod/*.dll lnx64-mod/*.so osx-mod/* raspberry_pi-mod/*

      - uses: actions/upload-artifact@v2
        with:
          name: All-mods
          path: build/legacy/legacy_*.pk3

      - name: Generate packages
        shell: bash
        working-directory: build/
        run: cpack

      - uses: actions/upload-artifact@v2
        with:
          name: lnx32-packages
          path: |
            build/etlegacy-*.tar.gz
            build/etlegacy-*.sh

#   ______   _                   _                            _
#  |  ____| (_)                 | |                          | |
#  | |__     _   _ __     __ _  | |    _ __     __ _    ___  | | __   __ _    __ _    ___   ___
#  |  __|   | | | '_ \   / _` | | |   | '_ \   / _` |  / __| | |/ /  / _` |  / _` |  / _ \ / __|
#  | |      | | | | | | | (_| | | |   | |_) | | (_| | | (__  |   <  | (_| | | (_| | |  __/ \__ \
#  |_|      |_| |_| |_|  \__,_| |_|   | .__/   \__,_|  \___| |_|\_\  \__,_|  \__, |  \___| |___/
#                                     | |                                     __/ |
#                                     |_|                                    |___/
# Generate the final packages for 64lnx, Osx, Windows and Raspberry Pi 3/4
  lnx64:
    runs-on: ubuntu-16.04
    needs: [ lnx32 ]
    container:
      image: etlegacy/lnx-build:centos7
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

# These are for the ubuntu build, our own build image has everything preinstalled.
#      - name: Install dependencies
#        run: |
#          sudo apt update
#          sudo apt install nasm libwayland-dev wayland-protocols libgl1-mesa-dev libglu1-mesa-dev libasound2-dev pulseaudio libpulse-dev

      - name: Build
        shell: bash
        run: ./easybuild.sh build -64

      - uses: actions/download-artifact@v2
        with:
          name: All-mods
          path: build/legacy

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: build/legacy

      - name: Generate packages
        shell: bash
        working-directory: build/
        run: cpack

      - uses: actions/upload-artifact@v2
        with:
          name: lnx64-packages
          path: |
            build/etlegacy-*.tar.gz
            build/etlegacy-*.sh

  osx:
    runs-on: macos-10.15
    needs: [ lnx32 ]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Install dependencies
        run: |
          brew bundle
          brew install librsvg graphicsmagick

      - name: Build
        env:
          DEVELOPER_DIR: /Applications/Xcode_11.2.app/Contents/Developer
        shell: bash
        run: ./easybuild.sh build -64 --osx=10.14

      - uses: actions/download-artifact@v2
        with:
          name: All-mods
          path: build/legacy

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: build/legacy

      - name: Generate packages
        shell: bash
        run: ./easybuild.sh package -64 --osx=10.14

      - uses: actions/upload-artifact@v2
        with:
          name: osx-packages
          path: |
            build/etlegacy-*.tar.gz
            build/etlegacy-*.dmg

  win:
    runs-on: windows-2019
    needs: [ lnx32 ]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Build
        shell: cmd
        run: call .\easybuild.bat build

      - uses: actions/download-artifact@v2
        with:
          name: All-mods
          path: build/legacy

      - name: Display structure of downloaded files
        run: dir
        working-directory: build/legacy

      - name: Generate packages
        shell: cmd
        working-directory: build
        run: cpack

      - uses: actions/upload-artifact@v2
        with:
          name: win-packages
          path: |
            build/etlegacy-*.exe
            build/etlegacy-*.zip

  raspberry_pi:
    runs-on: ubuntu-16.04
    needs: [ lnx32 ]
    strategy:
      matrix:
        include:
          - arch: armv7
            distro: ubuntu20.04		
          - arch: aarch64
            distro: ubuntu20.04

    steps:
      - uses: actions/checkout@v2.1.0
        with:
          submodules: true
          fetch-depth: 0

      - uses: uraimo/run-on-arch-action@v2.0.5
        name: Build on ${{ matrix.arch }}
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          install: |
            case "${{ matrix.distro }}" in
              ubuntu*)
                apt-get update -q -y
                apt-get -y install build-essential libfreeimage-dev libopenal-dev libpango1.0-dev libsndfile-dev libudev-dev \
                libasound2-dev libjpeg8-dev libwebp-dev automake libgl1-mesa-glx libogg0 libopenal1 libvorbis0a \
                libvorbisfile3 zlib1g libx11-dev libglew-dev libegl1-mesa-dev \
                nasm autoconf git cmake zip gcc g++ libtool libxrandr-dev x11proto-randr-dev
                ;;
              buster)
                apt-get update -q -y
                apt-get -y install build-essential libfreeimage-dev libopenal-dev libpango1.0-dev libsndfile-dev libudev-dev \
                libasound2-dev libjpeg62-turbo-dev libwebp-dev automake libgl1-mesa-glx libogg0 libopenal1 libvorbis0a \
                libvorbisfile3 zlib1g libx11-dev libglew-dev libegl1-mesa-dev \
                nasm autoconf git cmake zip gcc g++ libtool libxrandr-dev x11proto-randr-dev
                ;;
            esac
          run: |
            ./easybuild.sh build -RPI -GLES -j2
            cd build && cpack

          setup: |
            mkdir -p "${PWD}/build/legacy"

          # Mount the artifacts directory in the container
          dockerRunArgs: |
            --volume "${PWD}/build/legacy:/build/legacy"


      - name: Display structure of downloaded files
        run: ls -R
        working-directory: build/legacy

      - uses: actions/upload-artifact@v2
        with:
          name: raspberry_pi-packages
          path: |
            build/etlegacy-*.tar.gz
            build/etlegacy-*.sh

